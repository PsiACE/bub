"""Type stubs for eventure library."""

from typing import Any, Callable

# Type aliases
EventHandler = Callable[["Event"], None]
Subscription = Callable[[], None]

class Event:
    """Event class from eventure library."""

    def __init__(
        self,
        tick: int,
        timestamp: float,
        type: str,  # noqa: A002
        data: dict[str, Any],
        id: str | None = None,  # noqa: A002
        parent_id: str | None = None,
    ) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def parent_id(self) -> str | None: ...
    @property
    def tick(self) -> int: ...
    @property
    def timestamp(self) -> float: ...
    @property
    def type(self) -> str: ...
    @property
    def data(self) -> dict[str, Any]: ...
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, json_str: str) -> Event: ...

class EventLog:
    """Event log class from eventure library."""

    def __init__(self) -> None: ...
    def add_event(self, event: Event) -> None: ...
    def get_events(self) -> list[Event]: ...
    def clear(self) -> None: ...

class EventBus:
    """Event bus class from eventure library."""

    def __init__(self, event_log: EventLog) -> None: ...
    def publish(self, event_type: str, data: dict[str, Any], parent_event: Event | None = None) -> Event: ...
    def subscribe(self, event_type: str, handler: EventHandler) -> Subscription: ...
    def dispatch(self, event: Event) -> None: ...
    @property
    def event_log(self) -> EventLog: ...
    @property
    def subscribers(self) -> dict[str, list[EventHandler]]: ...

class EventQuery:
    """Event query class from eventure library."""

    def __init__(self, event_log: EventLog) -> None: ...
    def get_events_by_type(self, event_type: str) -> list[Event]: ...
    def get_events_by_data(self, key: str, value: Any) -> list[Event]: ...
    def get_events_at_tick(self, tick: int) -> list[Event]: ...
    def get_root_events(self) -> list[Event]: ...
    def get_child_events(self, parent_id: str) -> list[Event]: ...
    def get_cascade_events(self, event_id: str) -> list[Event]: ...
    def count_events_by_type(self, event_type: str) -> int: ...
    def print_event_cascade(self) -> None: ...
    def print_single_cascade(self, event: Event) -> None: ...
    def print_event_details(self, event: Event) -> None: ...
    @property
    def event_log(self) -> EventLog: ...
    def __iter__(self) -> list[Event]: ...
